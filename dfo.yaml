openapi: 3.0.3
info:
  title: DFO API 3.0
  version:3
servers:
  - url: 'https://api-de-{region}.niceincontact.com/dfo/3.0'
    description: Production API server
    variables:
      region:
        default: na1
        description: Region of API server
        enum:
          - na1
          - eu1
          - au1
          - uk1
          - ca1
          - jp1
paths:
  /tags:
    get:
      tags:
        - Tag
      summary: Get list of Tags
      parameters:
        - name: 'id[]'
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Ids of tags
          examples:
            oneId:
              summary: Example of a single Ids
              value: 'id[]=1'
            multipleIds:
              summary: Example of multiple Ids
              value: 'id[]=1&id[]=23&id[]=456'
          required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
  
  '/contacts/{contactNumber}':
    get:
      tags:
        - Contact
      summary: Get Contact detail
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
    put:
      tags:
        - Contact
      summary: Update of selected contact's properties
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                routingQueuePriority:
                  type: integer
                  description: New Contact's routing queue priority
                  minimum: 0
                  maximum: 1000
                proficiency:
                  type: object
                  description: New Contact's proficiency
                  properties:
                    from:
                      type: integer
                      minimum: 1
                      maximum: 20
                    to:
                      type: integer
                      minimum: 1
                      maximum: 20
                  required:
                    - from
                    - to
      responses:
        '204':
          description: Contact was changed
        '400':
          description: Contact was not changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/detail/pagination':
    get:
      tags:
        - Contact
      summary: Get pagination of contact detail
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/messages':
    get:
      tags:
        - Contact
      summary: Get Contact messages
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MessageDetail'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/inbox-assignment':
    put:
      tags:
        - Contact
      summary: Change inbox assignee for contact
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: New inbox assignee's user ID
                inboxAssigneeCxoneId:
                  type: string
                  description: New inbox assignee's CXOne user ID
                assignedBy:
                  type: integer
                  description: User ID of the change initiator (system user as a default)
                  default: 0
                assignedByCxoneId:
                  type: string
                  description: CXOne User ID of the change initiator (system user as a default)
              required:
                - userId
      responses:
        '200':
          description: Inbox assignee was changed
        '400':
          description: Inbox assignee was not changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
    delete:
      tags:
        - Contact
      summary: Unassign inbox assignee from contact
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Inbox assignee was unassigned
        '400':
          description: Inbox assignee was not changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/custom-fields':
    put:
      tags:
        - Contact
      summary: Change custom field values for contact
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CustomField'
      responses:
        '200':
          description: Custom field values were updated
        '400':
          description: Custom field values were not saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/routing-queue':
    put:
      tags:
        - Contact
      summary: Change routing queue for contact
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                routingQueueId:
                  type: string
              required:
                - routingQueueId
      responses:
        '200':
          description: Routing Queue value was updated
        '400':
          description: Routing Queue value was not saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Contact or Routing Queue was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/agent-contacts/{agentContactId}/close':
    put:
      tags:
        - Contact
      summary: Close agent contact in contact
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
        - name: agentContactId
          in: path
          description: ID of the agent contact
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent contact is already closed or has been closed
        '400':
          description: Agent contact was not closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Agent contact or Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/contacts/{contactNumber}/status':
    put:
      tags:
        - Contact
      summary: Change status of contact
      parameters:
        - name: contactNumber
          in: path
          description: Number of the contact (contact ID will be supported in the future)
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - new
                    - open
                    - escalated
                    - resolved
                    - closed
      responses:
        '204':
          description: Status of contact was updated
        '400':
          description: Status of contact was not saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Contact was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  /consumer-contact-custom-fields:
    get:
      tags:
        - Custom fields
      summary: Get definition of Contact's Custom Fields
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomFieldDefinition'
  /customers:
    get:
      tags:
        - Customer
      summary: Get list of Customers based on filter
      parameters:
        - name: query
          in: query
          schema:
            type: string
          description: Customer query search
          examples:
            notSimilar:
              summary: Field value is not similar
              value: NOT (fullName ~ john)
            idOnExternalPlatformEquals:
              summary: ID on external platform equals a value
              value: identityIdOnExternalPlatform = 123456efa
            multipleValuesSearch:
              summary: Use multiple search values for field
              value: 'identityIdOnExternalPlatform IN (123456efa, bc6582)'
          required: false
        - name: limit
          in: query
          description: Maximum count of returned entities per page.
          required: false
          schema:
            type: integer
        - name: scrollToken
          in: query
          description: Token for requested page
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: integer
                    example: 1
                  scrollToken:
                    type: string
                    description: Pagination token
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
        '400':
          description: Some of the arguments were invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiError'
                  uid:
                    type: string
                    description: UID for debug purposes
  '/customers/{customerId}':
    get:
      tags:
        - Customer
      summary: Get detail of the customer
      parameters:
        - name: customerId
          in: path
          description: ID of the customer
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  /customers/custom-field-definitions:
    get:
      tags:
        - Customer
      summary: Get definition of Customer's Custom Fields
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerCustomFieldDefinition'
    put:
      tags:
        - Customer
      summary: Create or update Customer Custom Field (based on ident)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCustomFieldDefinition'
      responses:
        '201':
          description: Created
        '204':
          description: Updated
        '404':
          description: Custom fields were not created or updated due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/customers/{customerId}/custom-fields':
    put:
      tags:
        - Customer
      summary: Update values of customer custom fields
      parameters:
        - name: customerId
          in: path
          description: ID of the contact
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CustomField'
      responses:
        '200':
          description: Custom fields' values were updated
        '400':
          description: Custom fields values were not updated due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/author-name-removal':
    post:
      tags:
        - Message
      summary: Remove author name from message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Author name successfully removed from message
        '400':
          description: Author name not removed from message due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '403':
          description: Author name not removed from message due to missing permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/tags/{tagId}':
    put:
      tags:
        - Message
      summary: Add tag to message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          description: ID of the tag
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tag successfully added to message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetail'
        '400':
          description: Tag not added to message due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
    delete:
      tags:
        - Message
      summary: Remove tag from message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          description: ID of the tag
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tag successfully removed from message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetail'
        '400':
          description: Tag not removed from message due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/content-removal':
    post:
      tags:
        - Message
      summary: Remove content of a message
      parameters:
        - name: messageId
          in: path
          description: ID of a message
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Message's content successfully removed from message
        '400':
          description: Message's content not removed from message due to an error - content already removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '403':
          description: Message's content not removed from message due to missing permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Message's content not removed from message due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/hide':
    post:
      tags:
        - Message
      summary: Hide message on external platform and adjust flags in DFO platform to mark the message as hidden
      parameters:
        - name: messageId
          in: path
          description: ID of a message
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Message successfully removed
        '400':
          description: Message was not removed due an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '403':
          description: Message was not removed due to missing permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message was not removed - Message or Contact were not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Message was not removed due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
    delete:
      tags:
        - Message
      summary: Un-hide message on external platform and adjust flags in DFO platform to mark the message as not hidden
      parameters:
        - name: messageId
          in: path
          description: ID of a message
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Message successfully un-hidden
        '400':
          description: Message was not un-hidden due an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '403':
          description: Message was not un-hidden due to missing permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message was not un-hidden - Message or Contact were not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Message was not un-hidden due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/delete':
    post:
      tags:
        - Message
      summary: This request deletes message on external platform and also adjusts flags in DFO platform to mark that this message is deleted
      parameters:
        - name: messageId
          in: path
          description: ID of a message
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Message successfully hidden
        '400':
          description: Message was not hidden - an error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '403':
          description: Message was not hidden - missing permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message was not hidden - message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Document saving version conflict ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/notes':
    post:
      tags:
        - Message
      summary: Create new note to message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: This is content of this note.
                  description: Content of the note
      responses:
        '201':
          description: Note was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageNote'
        '404':
          description: Message was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Document saving version conflict ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/notes/{noteId}':
    put:
      tags:
        - Message
      summary: Update note of the message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: ID of the note
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: This is content of this note.
                  description: New content of the note
              required:
                - content
      responses:
        '200':
          description: Note successfully updated within the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageNote'
        '400':
          description: Note was not updated due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message or note was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
    delete:
      tags:
        - Message
      summary: Remove note from message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: ID of the note
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Note successfully removed from message
        '404':
          description: Note not removed from message - either message or note for the message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Note not removed from message due to a version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/read':
    put:
      tags:
        - Message
      summary: Set read status of a message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isRead
              properties:
                isRead:
                  type: boolean
      responses:
        '200':
          description: Read status of message successfully set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetail'
        '400':
          description: Read status was not set due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Message's is read status was not changed due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/sentiment':
    put:
      tags:
        - Message
      summary: Set sentiment of a message
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sentiment
              properties:
                sentiment:
                  type: string
                  enum:
                    - negative
                    - positive
                    - neutral
      responses:
        '200':
          description: Sentiment of message successfully set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetail'
        '404':
          description: Message was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Message's sentiment was not changed due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  '/messages/{messageId}/react/{reactionType}':
    post:
      tags:
        - Message
      summary: Add reaction to a message in channel
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
        - name: reactionType
          in: path
          description: Type of the reaction
          required: true
          schema:
            type: string
            enum:
              - like
              - share
      responses:
        '204':
          description: Reaction was added to message
        '400':
          description: Reaction was not added due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Reaction was not added due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
    delete:
      tags:
        - Message
      summary: Delete reaction from a message in channel
      parameters:
        - name: messageId
          in: path
          description: ID of the message
          required: true
          schema:
            type: string
        - name: reactionType
          in: path
          description: Type of the reaction
          required: true
          schema:
            type: string
            enum:
              - like
      responses:
        '204':
          description: Reaction was deleted from message
        '400':
          description: Reaction was not deleted due to an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '404':
          description: Message was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
        '409':
          description: Reaction was not deleted due to version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
  /routing-queues:
    get:
      tags:
        - Routing queue
      summary: Get list of routing queues based on filter
      parameters:
        - name: 'id[]'
          in: query
          schema:
            type: array
            items:
              type: string
          description: Ids of Routing Queues
          examples:
            oneId:
              summary: Example of a single ID
              value:
                - 681ce3ab-0ef3-4d45-a4c6-dedeec8901ff
            multipleIds:
              summary: Example of multiple IDs
              value:
                - 681ce3ab-0ef3-4d45-a4c6-dedeec8901ff
                - 201ce3ab-0ef3-4d45-a4c6-dedeec8901ee
          required: false
        - name: nameContains
          in: query
          schema:
            type: string
          description: Filter by part of name of a routing queue
          required: false
        - name: withDeleted
          in: query
          schema:
            type: boolean
            default: false
          required: false
        - name: size
          in: query
          description: Maximum count of returned entities
          required: false
          schema:
            type: integer
        - name: isAssignableByMe
          in: query
          description: Filters routing queues that can be assigned by logged agent
          required: false
          schema:
            type: boolean
        - name: isAssignableByUser
          in: query
          description: Filters routing queues that can be assigned by set user
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoutingQueue'
        '400':
          description: Something went wrong
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiError'
                  uid:
                    type: string
                    description: UID for debug purposes
  /one-time-token/authentication:
    get:
      tags:
        - One time verification token
      summary: Authenticate redirect URL for one-time token
      parameters:
        - name: redirectUrl
          in: query
          schema:
            type: string
            minLength: 1
          required: true
        - name: state
          in: query
          schema:
            type: string
            minLength: 1
          required: true
      responses:
        '302':
          description: In "location" header contains redirect URL with token
        '401':
          description: Access denied
  /one-time-token/verification:
    post:
      tags:
        - One time verification token
      summary: Verify one-time token and get JWT authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - brandId
                - userId
                - token
                - purpose
              properties:
                brandId:
                  type: integer
                  description: ID of a Brand in DFO
                userId:
                  type: integer
                  description: ID of a User in DFO existing in given Brand
                token:
                  type: string
                  description: Valid unused one-time token
                purpose:
                  type: string
                  enum:
                    - login
                    - channel-integration
                    - custom-component-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - brand
                  - user
                  - accessToken
                properties:
                  brand:
                    $ref: '#/components/schemas/Brand'
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
        '400':
          description: 'Invalid data - nonexistent Brand/User, invalid token, unknown purpose'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorCollection'
components:
  schemas:
    ApiError:
      type: object
      required:
        - field
        - message
        - parameters
      properties:
        field:
          type: string
          description: Name of the field containing error
        message:
          type: string
          description: Error description
        parameters:
          type: object
          description: Free dictionary of additional data describing the error state
        errorCode:
          type: string
          description: Specific code of the type of error
    ApiErrorCollection:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
        uid:
          type: string
          description: UID for debug purposes
    Pagination:
      type: object
      properties:
        previous:
          type: string
          description: Identifier of the previous item
        next:
          type: string
          description: Identifier of the following item
    Brand:
      type: object
      required:
        - id
        - tenantId
        - businessUnitId
      properties:
        id:
          type: integer
        tenantId:
          type: string
        businessUnitId:
          type: string
    Channel:
      type: object
      required:
        - id
        - name
        - channelIntegrationId
        - realExternalPlatformId
        - idOnExternalPlatform
        - isPrivate
        - hasTreeStructure
      properties:
        id:
          type: string
          description: Unique ID of channel
        name:
          type: string
          description: Channel name e.g. My Twitter Page
        channelIntegrationId:
          type: string
          description: Channel integration ID (UUID)
        realExternalPlatformId:
          enum:
            - apple-apps-reviews
            - apple-business-chat
            - chat
            - bw
            - custom
            - email
            - fb
            - forum
            - google-places
            - google-play
            - ig
            - kik
            - line
            - li
            - microsoft-teams
            - ok-ru
            - rss
            - slack
            - sms
            - social-watch
            - telegram
            - tw
            - viber
            - vk
            - voice
            - whatsapp
            - youscan
            - yt
          type: string
          description: 'Identifier of external platform. This identifier has no impact on business logic and is for read only purposes, e.g. when grouping channels by 3rd party providers for displaying them.'
        idOnExternalPlatform:
          type: string
          description: Identifier of external platform e.g. twitter account id
        isPrivate:
          type: boolean
        hasTreeStructure:
          type: boolean
        contentFormat:
          type: string
          default: plain
          description: 'Format of content, Security warning: if you set html, content in html format would not be escaped'
          enum:
            - plain
            - html
        externalPlatformIcon:
          type: string
          enum:
            - ''
            - amazon
            - apple
            - apple-apps
            - apple-imessage
            - co-browsing
            - contact-form
            - email
            - facebook
            - facebook-dm
            - facebook-messenger
            - forum
            - google
            - google-dm
            - google-maps
            - google-play
            - google-search
            - instagram
            - instagram-dm
            - kakao-talk
            - line-message
            - linkedin
            - listening
            - kik
            - ok-ru
            - pinterest
            - rcs
            - rss
            - slack
            - sms
            - snapchat
            - tango
            - telegram
            - tumblr
            - twitter
            - twitter-dm
            - viber
            - vkontakte
            - vkontakte-dm
            - voice
            - whatsapp
            - youtube
            - wechat
          default: ''
          description: Channel icon identifier
        hasAbilityToSendFiles:
          type: boolean
          description: Define if channel is able to process attachments in reply requests. Also if this is set to TRUE it will show ability to send file to the agent in the Agent Console.
          default: false
        hasOutboundFlow:
          type: boolean
          description: 'Define if channel is able to do outbounds (using the API), meaning to start manualy completely new conversation without previous conversation with Customer.'
          default: false
        hasManualOutboundFlow:
          type: boolean
          default: false
          description: 'Define if agent can send outbound from Agent Console, meaning to start manualy completely new conversation without previous conversation with Customer'
        translationGroup:
          type: string
          enum:
            - default
            - email
            - phone
          description: Translation group for platform specific naming
        externalPlatformAvatar:
          type: string
          description: URL to channel avatar (make sure url will not expire and is accesible over the internet for users)
          default: ''
        ownerUserId:
          type: integer
          description: Define owner of the channel (user who will be notified if channel errors occured). UserId is DFO User ID.
          default: 0
        hasReply:
          type: boolean
          default: true
          description: Define if channel is able to send reply and whether replybox will be displayed to agent in the Agent Console.
        hasAbilityToShare:
          type: boolean
          default: false
          description: Define if channel is able to send share message actions
        hasAbilityToLike:
          type: boolean
          default: false
          description: Define if channel is able to send like message actions
        hasAbilityToTag:
          type: boolean
          default: false
          description: Define if channel is able to send tag message actions
        hasAbilityToChangeFrom:
          type: boolean
          default: false
          description: Define if channel is able to change sender of reply
        wysiwygEnabled:
          type: boolean
          default: false
          description: Define if wysiwyg is used for reply box in the Agent Console. Also the content type HTML needs to be used at that point.
    User:
      type: object
      required:
        - id
        - emailAddress
        - loginUsername
        - firstName
        - surname
        - isBotUser
        - isSurveyUser
        - userType
      properties:
        id:
          type: integer
          description: ID of the User (platform specific)
          example: 21543
        incontactId:
          type: string
          description: ID of the User in CXone
          example: b6925157-5e0e-4c11-8e9b-56a4078abb25
        emailAddress:
          type: string
          example: agent@cxone.com
        loginUsername:
          type: string
          description: 'Login username, typically an e-mail address'
          example: agent@cxone.com
        userType:
          type: string
          enum:
            - user
            - superuser
        firstName:
          type: string
          example: John
        surname:
          type: string
          example: Haste
        nickname:
          type: string
        imageUrl:
          type: string
          description: Path to user's avatar image
        isBotUser:
          type: boolean
          default: false
        isSurveyUser:
          type: boolean
          default: false
    MessageMinimum:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 3260aca1-e1c1-403e-a2ba-72bf4251a1cb
    NewMessage:
      type: object
      required:
        - idOnExternalPlatform
        - thread
        - messageContent
        - createdAtWithMilliseconds
        - authorEndUserIdentity
      properties:
        idOnExternalPlatform:
          type: string
        deletedOnExternalPlatform:
          type: boolean
          default: false
        url:
          type: string
        direction:
          enum:
            - inbound
            - outbound
          default: inbound
          type: string
        createdAtWithMilliseconds:
          type: string
          format: date-time
          example: '2019-10-12T03:20:50.52-04:00'
        tagIds:
          type: array
          items:
            type: integer
          default: []
        reactionStatistics:
          $ref: '#/components/schemas/ReactionStatistics'
        thread:
          $ref: '#/components/schemas/Thread'
        replyToMessage:
          $ref: '#/components/schemas/ReplyToMessage'
        title:
          type: string
        messageContent:
          $ref: '#/components/schemas/MessageContent'
        authorEndUserIdentity:
          $ref: '#/components/schemas/AuthorCustomerIdentity'
        browserFingerprint:
          $ref: '#/components/schemas/BrowserFingerprint'
        contact:
          $ref: '#/components/schemas/NewContact'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/Recipient'
    SendOutbound:
      type: object
      required:
        - messageContent
        - recipients
      properties:
        thread:
          $ref: '#/components/schemas/Thread'
        replyToMessage:
          allOf:
            - $ref: '#/components/schemas/ReplyToMessage'
          description: Can be used to build multilevel structure of message thread
        messageContent:
          $ref: '#/components/schemas/MessageContent'
        title:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        contact:
          $ref: '#/components/schemas/NewContact'
        recipients:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Recipient'
        browserFingerprint:
          $ref: '#/components/schemas/BrowserFingerprint'
    MessageDetail:
      type: object
      properties:
        id:
          type: string
        idOnExternalPlatform:
          type: string
        deletedOnExternalPlatform:
          type: boolean
        url:
          type: string
        direction:
          enum:
            - inbound
            - outbound
          type: string
        createdAt:
          type: string
          format: date-time
          example: '2019-10-12T03:20:50-04:00'
        reactionStatistics:
          $ref: '#/components/schemas/ReactionStatistics'
        messageContent:
          $ref: '#/components/schemas/MessageContent'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    Tag:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: integer
          description: Unique ID of the tag (platform specific)
          example: 1145
        color:
          type: string
          maxLength: 7
          description: RGB representation of color
          example: '#FF0000'
        title:
          type: string
          description: Title of the tag
          example: Some tag name
    NoteStatus:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - new
            - checked
    MessageNote:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - user
        - content
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique ID of the note
          example: c3bb560e-de82-4381-bbe2-133e1655716d
        createdAt:
          type: string
          format: date-time
          example: '2020-10-01T15:55:00+02:00'
        updatedAt:
          type: string
          format: date-time
          example: '2020-10-01T15:55:00+02:00'
        user:
          $ref: '#/components/schemas/User'
        currentAssignee:
          $ref: '#/components/schemas/User'
        message:
          $ref: '#/components/schemas/MessageMinimum'
        content:
          type: string
          description: Note's content
          example: Note's content
        status:
          $ref: '#/components/schemas/NoteStatus'
    Thread:
      type: object
      required:
        - idOnExternalPlatform
      properties:
        idOnExternalPlatform:
          type: string
          description: Unique ID of the thread on external platform e.g. Facebook post ID
        threadName:
          type: string
          description: 'E.g. Email subject, forum thread title...'
          default: ''
    ReplyToMessage:
      type: object
      properties:
        idOnExternalPlatform:
          type: string
          description: ID of parent message. Only for channels with hasTreeStructure is true
    ReactionStatistics:
      type: object
      properties:
        likes:
          type: integer
        shares:
          type: integer
    AuthorCustomerIdentity:
      type: object
      required:
        - idOnExternalPlatform
      properties:
        idOnExternalPlatform:
          type: string
          description: 'Unique ID of user on external platform, e.g. Facebook user ID'
        firstName:
          type: string
        lastName:
          type: string
        nickname:
          type: string
        image:
          type: string
          description: 'URL to Consumer image, it has to be availble from public internet so DFO can download the image into its own file storage.'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
    CustomField:
      type: object
      required:
        - ident
        - value
      properties:
        ident:
          type: string
        value:
          type: string
        updatedAt:
          type: string
          format: date-time
          example: '2020-10-01T15:55:00+02:00'
    Attachment:
      type: object
      required:
        - friendlyName
        - url
      properties:
        friendlyName:
          type: string
        url:
          type: string
    Recipient:
      type: object
      required:
        - idOnExternalPlatform
      properties:
        idOnExternalPlatform:
          type: string
          description: Customer's ID on external platform
        name:
          type: string
        isPrimary:
          type: boolean
        isPrivate:
          type: boolean
    BrowserFingerprint:
      type: object
      properties:
        browser:
          type: string
        browserVersion:
          type: string
        os:
          type: string
        osVersion:
          type: string
        language:
          type: string
        ip:
          type: string
        location:
          type: string
        country:
          type: string
    Customer:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Internal Customer's ID
        firstName:
          type: string
        surname:
          type: string
        fullName:
          type: string
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        image:
          type: string
          description: URL to Customer's avatar
          example: 'https://app-eu1.brandembassy.test/img/user-default.png'
    Contact:
      type: object
      properties:
        id:
          type: string
          description: ID of Contact (case) where message is located.
        consumerContactStorageId:
          type: string
          description: ID of contact storage where message is stored. This is internal ID of DFO and by additional post processing this ID may change. That's why you should always rely on Message.idOnExternalPlatform and on Thread.idOnExternalPlatform.
        channelId:
          type: string
        direction:
          enum:
            - inbound
            - outbound
          type: string
        createdAt:
          type: string
          format: date-time
          example: '2019-10-12T03:20:50-04:00'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
    NewContact:
      type: object
      properties:
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        elevation:
          type: object
          properties:
            interaction:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
            contact:
              type: object
              properties:
                contactId:
                  type: string
                  format: uuid
              required:
                - contactId
            agentContact:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
            fromProvider:
              type: string
              enum:
                - dfo
                - acd
                - em
          required:
            - interaction
    MessageContent:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - TEXT
            - PLUGIN
            - QUICK_REPLIES
        payload:
          oneOf:
            - $ref: '#/components/schemas/TextPayload'
            - $ref: '#/components/schemas/ElementsPayload'
            - $ref: '#/components/schemas/QuickRepliesPayload'
        fallbackText:
          type: string
        postback:
          type: string
          nullable: true
      example:
        $ref: '#/components/examples/MessageContentExample'
    ElementsPayload:
      type: object
      properties:
        postback:
          type: string
        elements:
          type: array
          items:
            $ref: '#/components/schemas/Element'
    QuickRepliesPayload:
      type: object
      required:
        - text
        - actions
      properties:
        text:
          type: object
          properties:
            content:
              type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionButton'
    TextPayload:
      type: object
      properties:
        text:
          type: string
    ActionButton:
      type: object
      required:
        - text
        - type
      properties:
        text:
          type: string
        type:
          type: string
          enum:
            - REPLY_BUTTON
        postback:
          type: string
    Element:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        type:
          type: string
          enum:
            - TEXT
            - BUTTON
            - MENU
            - TITLE
        elements:
          type: array
          items:
            $ref: '#/components/schemas/Element'
    CustomerCustomFieldDefinition:
      type: object
      required:
        - ident
      properties:
        ident:
          type: string
        label:
          type: string
        type:
          type: string
          enum:
            - text
            - email
            - list
        isRequired:
          type: boolean
          default: false
        isEditable:
          type: boolean
          default: false
        isVisibleInRightPanel:
          type: boolean
          default: false
        isVisibleInCustomerCard:
          type: boolean
          default: true
    CustomFieldDefinition:
      type: object
      properties:
        ident:
          type: string
        label:
          type: string
        type:
          type: string
          enum:
            - text
        required:
          type: boolean
        visibleInPostDetail:
          type: boolean
        visibleInLiveChat:
          type: boolean
        isEditable:
          type: boolean
    RoutingQueue:
      type: object
      required:
        - id
        - name
        - isSubqueue
        - isDeleted
      properties:
        id:
          type: string
          example: 0c20a6b9-1427-4d8f-937d-7c3a48ab7555
        name:
          type: string
          example: The routing queue name
        isSubqueue:
          type: boolean
          example: false
        isDeleted:
          type: boolean
          example: false
  examples:
    MessageContentExample:
      value:
        type: TEXT
        payload:
          text: Hello world!
    SendOutboundTextToExistingThread:
      value:
        thread:
          idOnExternalPlatform: 2d2dbf24-7564-4388-b35e-6c5b60093022
        messageContent:
          type: TEXT
          payload:
            text: Hello world!
        attachments:
          - friendlyName: my-image.png
            url: 'https://picsum.photos/300/150'
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundEmailExample:
      value:
        thread:
          threadName: Subject line
        messageContent:
          type: TEXT
          payload:
            text: <p>Hello world!</p>
        title: Subject line
        attachments:
          - friendlyName: my-image.png
            url: 'https://picsum.photos/300/150'
        recipients:
          - idOnExternalPlatform: to-recipient@domain.com
            name: John Doe
            isPrimary: true
            isPrivate: false
          - idOnExternalPlatform: cc-recipient@domain.com
            name: Johny Walker
            isPrimary: false
            isPrivate: false
          - idOnExternalPlatform: bcc-recipient@domain.com
            name: Jack Sparrow
            isPrimary: false
            isPrivate: true
    SendOutboundExampleQuickReplies:
      value:
        messageContent:
          type: QUICK_REPLIES
          fallbackText: Text sent if rich message is not available on external platform
          payload:
            text:
              content: 'Hello, we will deliver the package between 12:00 and 16:00. Please specify which day.'
            actions:
              - type: REPLY_BUTTON
                text: Today
                postback: /today
              - type: REPLY_BUTTON
                text: Tomorrow
                postback: /today
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundWhatsappExampleTemplate:
      value:
        messageContent:
          type: PLUGIN
          payload:
            postback: '{"whatsAppTemplateName":"whats_app_test_message_template_511112","namespace":"b7d932ac_1d01_8469_8905_0a70917c3cf1","language":"en"}'
            elements:
              - id: element-1
                type: TEXT_TEMPLATE
                template: 'Dear {{var1}}, this month’s subscription invoice amount is {{var2}}. Payment is due by {{var3}}. Have a nice day!'
                variables:
                  - var1: Tomas
                    var2: $100
                    var3: January
        recipients:
          - idOnExternalPlatform: '13009884777'
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundChatExampleMenu:
      value:
        thread:
          idOnExternalPlatform: 2d2dbf24-7564-4388-b35e-6c5b60093022
        messageContent:
          type: PLUGIN
          payload:
            elements:
              - id: Ek4tPy1h4
                type: MENU
                elements:
                  - id: Uk4tPy1h2
                    type: FILE
                    url: 'https://picsum.photos/300/150'
                    filename: photo.jpg
                    mimeType: image/jpeg
                  - id: Ck4tPy1h3
                    type: TITLE
                    text: Hello!
                  - id: Ek4tPy1h1
                    type: TEXT
                    text: Lorem Impsum...
                  - id: Nkm0hRAiE
                    type: BUTTON
                    text: Click me!
                    postback: click-on-button-1
                  - id: EyCyTRCi4
                    type: BUTTON
                    text: Aww don`t click on me
                    postback: click-on-button-2
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundChatExampleGallery:
      value:
        thread:
          idOnExternalPlatform: 2d2dbf24-7564-4388-b35e-6c5b60093022
        messageContent:
          type: PLUGIN
          payload:
            elements:
              - id: Ek4tPy1h4
                type: MENU
                elements:
                  - id: Uk4tPy1h2
                    type: FILE
                    url: 'https://picsum.photos/300/150'
                    filename: photo.jpg
                    mimeType: image/jpeg
                  - id: Ck4tPy1h3
                    type: TITLE
                    text: Hello!
                  - id: Ek4tPy1h1
                    type: TEXT
                    text: Lorem Impsum...
                  - id: Nkm0hRAiE
                    type: BUTTON
                    text: Click me!
                    postback: click-on-button-1
                  - id: EyCyTRCi4
                    type: BUTTON
                    text: Aww don`t click on me
                    postback: click-on-button-2
              - id: Ek4tPy1h52
                type: MENU
                elements:
                  - id: Uk4tPy1h22
                    type: FILE
                    url: 'https://picsum.photos/300/150'
                    filename: photo.jpg
                    mimeType: image/jpeg
                  - id: Ck4tPy1h32
                    type: TITLE
                    text: Hello!
                  - id: Ek4tPy1h12
                    type: TEXT
                    text: Lorem Impsum...
                  - id: Nkm0hRAiE2
                    type: BUTTON
                    text: Click me!
                    postback: click-on-button-1
                  - id: NkGJ6CAiN2
                    type: BUTTON
                    text: Aww don`t click on me
                    postback: click-on-button-2
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundChatExampleTextAndButtons:
      value:
        thread:
          idOnExternalPlatform: 2d2dbf24-7564-4388-b35e-6c5b60093022
        messageContent:
          type: PLUGIN
          payload:
            elements:
              - id: Ek4tPy1h4
                type: TEXT_AND_BUTTONS
                elements:
                  - id: Ck4tPy1h3
                    type: TEXT
                    text: Lorem Impsum...
                  - id: Ek4tPy1h1
                    type: TEXT
                    text: Lorem Impsum...
                  - id: Nkm0hRAiE
                    type: BUTTON
                    text: Click me!
                    postback: click-on-button-1
                  - id: EyCyTRCi4
                    type: BUTTON
                    text: Aww don`t click on me
                    postback: click-on-button-2
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundChatExampleDeepLink:
      value:
        thread:
          idOnExternalPlatform: 2d2dbf24-7564-4388-b35e-6c5b60093022
        messageContent:
          type: PLUGIN
          payload:
            elements:
              - id: Nkm0hRAiE
                type: BUTTON
                text: See this page
                postback: '{"type":"deepLink","deepLink":"fb://profile/33138223345"}'
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
    SendOutboundChatExampleCustomElement:
      value:
        thread:
          idOnExternalPlatform: 2d2dbf24-7564-4388-b35e-6c5b60093022
        messageContent:
          type: PLUGIN
          payload:
            elements:
              - id: Nkm0hRAiE
                type: CUSTOM
                text: See this page
                variables:
                  color: green
                  buttons:
                    - id: 0edc9bf6-4922-4695-a6ad-1bdb248dd42f
                      name: Confirm
                    - id: 0b4ad5a5-5f6b-477d-8013-d6dcf7b87704
                      name: Decline
                  size:
                    ios: big
                    android: middle
        recipients:
          - idOnExternalPlatform: 1212foo
            name: John Doe
            isPrimary: true
            isPrivate: false
